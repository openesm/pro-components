import type { SdProTableContext } from '../types';
export declare const useTableMethod: ($proTable: SdProTableContext) => {
    clearSearch: () => void;
    clearAll: () => void;
    setActiveTab: (value: string | number) => void;
    getActiveTab: () => string | number;
    setTabBadge: (key: string | number, count: number) => void;
    clearTabBadge: () => void;
    reloadTableData: <RowItem = any>(rows: RowItem[]) => void;
    setTableData: (rows: any[]) => void;
    getTableData: () => {
        full_data: any[];
        filter_data: any[];
        visible_data: any[];
    };
    showColumn: (fieldOrColumn: any) => void;
    hideColumn: (fieldOrColumn: any) => void;
    getColumnByField: (field: string) => import("vxe-table").VxeTableDefines.ColumnInfo<any> | null | undefined;
    getColumns: () => import("vxe-table").VxeTableDefines.ColumnInfo<any>[] | undefined;
    getTableColumn: () => {};
    loadColumn: (columns: any[]) => Promise<any> | undefined;
    reloadColumns: (columns: any[]) => Promise<any> | undefined;
    refreshColumn: () => Promise<void> | undefined;
    insert: (row: any | any[]) => void;
    insertAt: (row: any | any[], rowIndex?: number) => void;
    remove: (row: any) => void;
    replaceRow: (old_row: any, new_row: any) => void;
    getRowIndex: (row: any, rows?: any[]) => number;
    setCurrentRow: (row: any) => void;
    clearCurrentRow: () => void;
    clearFilter: () => void;
    setFilter: (field: string) => void;
    getRadioRecord: () => any;
    setRadioRow: <RowItem_1 = any>(row: RowItem_1) => void;
    clearRadioRow: () => void;
    clearRadioReserve: () => void;
    getCheckboxRecords: () => any[] | undefined;
    setCheckboxRow: <RowItem_2 = any>(rows: RowItem_2 | RowItem_2[], checked: boolean) => void;
    setAllCheckboxRow: (checked: boolean) => void;
    toggleAllCheckboxRow: () => void;
    clearCheckboxRow: () => void;
    isAllCheckboxChecked: () => boolean | undefined;
    isAllCheckboxIndeterminate: () => boolean | undefined;
    setRowExpand: (row: any, checked: boolean) => void;
    setAllRowExpand: (checked: boolean) => void;
    toggleRowExpand: <RowItem_3 = any>(row: RowItem_3) => void;
    scrollToTop: () => void;
    getScroll: () => {
        virtualX: boolean;
        virtualY: boolean;
        scrollTop: number;
        scrollLeft: number;
    } | undefined;
    clearScroll: () => void;
    refreshScroll: () => void;
    toggleMaximize: () => void;
    maximize: () => void;
    revert: () => void;
    isMaximized: () => boolean;
    openExportSetting: () => void;
    closeExportSetting: () => void;
    openColumnSetting: () => void;
    closeColumnSetting: () => void;
};
